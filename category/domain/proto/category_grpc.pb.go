// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: domain/proto/category.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	ListCategories(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (CategoryService_ListCategoriesClient, error)
	GetCategory(ctx context.Context, in *IDInput, opts ...grpc.CallOption) (*Category, error)
	SearchCategory(ctx context.Context, in *SearchInput, opts ...grpc.CallOption) (CategoryService_SearchCategoryClient, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) ListCategories(ctx context.Context, in *EmptyInput, opts ...grpc.CallOption) (CategoryService_ListCategoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoryService_ServiceDesc.Streams[0], "/domain.CategoryService/ListCategories", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoryServiceListCategoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoryService_ListCategoriesClient interface {
	Recv() (*Category, error)
	grpc.ClientStream
}

type categoryServiceListCategoriesClient struct {
	grpc.ClientStream
}

func (x *categoryServiceListCategoriesClient) Recv() (*Category, error) {
	m := new(Category)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoryServiceClient) GetCategory(ctx context.Context, in *IDInput, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/domain.CategoryService/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) SearchCategory(ctx context.Context, in *SearchInput, opts ...grpc.CallOption) (CategoryService_SearchCategoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoryService_ServiceDesc.Streams[1], "/domain.CategoryService/SearchCategory", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoryServiceSearchCategoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoryService_SearchCategoryClient interface {
	Recv() (*Category, error)
	grpc.ClientStream
}

type categoryServiceSearchCategoryClient struct {
	grpc.ClientStream
}

func (x *categoryServiceSearchCategoryClient) Recv() (*Category, error) {
	m := new(Category)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility
type CategoryServiceServer interface {
	ListCategories(*EmptyInput, CategoryService_ListCategoriesServer) error
	GetCategory(context.Context, *IDInput) (*Category, error)
	SearchCategory(*SearchInput, CategoryService_SearchCategoryServer) error
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServiceServer struct {
}

func (UnimplementedCategoryServiceServer) ListCategories(*EmptyInput, CategoryService_ListCategoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedCategoryServiceServer) GetCategory(context.Context, *IDInput) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCategoryServiceServer) SearchCategory(*SearchInput, CategoryService_SearchCategoryServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchCategory not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_ListCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoryServiceServer).ListCategories(m, &categoryServiceListCategoriesServer{stream})
}

type CategoryService_ListCategoriesServer interface {
	Send(*Category) error
	grpc.ServerStream
}

type categoryServiceListCategoriesServer struct {
	grpc.ServerStream
}

func (x *categoryServiceListCategoriesServer) Send(m *Category) error {
	return x.ServerStream.SendMsg(m)
}

func _CategoryService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.CategoryService/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetCategory(ctx, req.(*IDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_SearchCategory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoryServiceServer).SearchCategory(m, &categoryServiceSearchCategoryServer{stream})
}

type CategoryService_SearchCategoryServer interface {
	Send(*Category) error
	grpc.ServerStream
}

type categoryServiceSearchCategoryServer struct {
	grpc.ServerStream
}

func (x *categoryServiceSearchCategoryServer) Send(m *Category) error {
	return x.ServerStream.SendMsg(m)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategory",
			Handler:    _CategoryService_GetCategory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCategories",
			Handler:       _CategoryService_ListCategories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchCategory",
			Handler:       _CategoryService_SearchCategory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "domain/proto/category.proto",
}
